name: Go3d Wikdnows
run-name: 5.8.0 for Windows-${{ inputs.architecture }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      installer_name:
        description: 'Name of the .exe and .msi'
        default: 'Go3D_setup'
        required: False
        type: string

      app_name:
        description: 'Name of the Application in the installer'
        default: 'Go3D'
        required: False
        type: string

      conan_args:
        description: '5.6 Conan args: eq.: --require-override'
        default: ''
        required: false
        type: string

      enterprise:
        description: 'Build Cura as an Enterprise edition'
        default: false
        required: true
        type: boolean

      staging:
        description: 'Use staging API'
        default: false
        required: true
        type: boolean

      architecture:
        description: 'Architecture'
        required: true
        default: 'X64'
        type: string

      operating_system:
        description: 'OS'
        required: true
        default: 'windows-2022'
        type: string

      conan_internal:
        required: false
        default: false
        type: boolean

permissions:
  contents: read

env:
  # CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_USER }}
  # CONAN_PASSWORD: ${{ secrets.CONAN_PASS }}
  WIN_CERT_INSTALLER_CER: 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
  WIN_CERT_INSTALLER_CER_PASS: password
  CURA_CONAN_VERSION: cura/latest@ultimaker/testing
  
  ENTERPRISE: False
  STAGING: False

jobs:
  cura-installer-create:
    runs-on: ${{ inputs.operating_system }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
        with:
          fetch-depth: 1
          ref: ${{ github.head_ref }}

      - name: Checkout repo PR
        uses: actions/checkout@v4
        if: ${{ github.event.pull_request.head.repo.full_name != github.repository }}
        with:
          fetch-depth: 1
          ref: ${{ github.base_ref }}

      - name: Sync pip requirements
        run: curl -O https://raw.githubusercontent.com/Ultimaker/cura-workflows/main/.github/workflows/requirements-runner.txt
        working-directory: .github\workflows


      - name: Setup Python and pip
        uses: actions/setup-python@v4
        with:
          python-version: 3.11.7
          cache: pip
          cache-dependency-path: .\.github\workflows\requirements-runner.txt

      - name: Install Python requirements and Create default Conan profile
        run: pip install -r .\.github\workflows\requirements-runner.txt

      - name: Echo $Env:WIX 
        run: |
          echo $Env:WIX
          cmake --version
          python --version
          conan --version
          pip show sip

      - name: Setup pipeline caches
        run: |
          New-Item -ItemType Directory -Force -Path C:\Users\runneradmin\.conan\downloads

      - name: Create default Conan profile
        run: conan profile new default --detect

      - name: Get Conan configuration
        run: |
          conan config install https://github.com/Ultimaker/conan-config.git
          conan config install https://github.com/Ultimaker/conan-config.git -a "-b runner/${{ runner.os }}/${{ runner.arch }}"

      - name: Add Cura private Artifactory remote
        if: ${{ inputs.conan_internal }}
        run: conan config install https://github.com/Ultimaker/conan-config.git -a "-b runner/internal"
      
      - name: Cache Conan downloads
        uses: actions/cache@v3
        with:
          path: C:\Users\runneradmin\.conan\downloads
          key: ${{ runner.os }}-conan-downloads-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-conan-downloads-

      - name: Create the Packages (Powershell)
        run: |
          conan create . local/test --build=missing --update -c tools.build:skip_test=True
          conan install cura/5.8.0@local/test  ${{ inputs.conan_args }} --build=missing --update -if cura_inst -g VirtualPythonEnv -o cura:enterprise=False -o cura:staging=False -o cura:internal=False -c tools.build:skip_test=True -s curaengine:build_type=RelWithDebInfo -s arcus:build_type=RelWithDebInfo -s clipper:build_type=RelWithDebInfo


      - name: Set Environment variables for Cura (Powershell)
        run: |
          echo "${Env:WIX}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          .\cura_inst\Scripts\activate_github_actions_env.ps1
          .\cura_inst\Scripts\activate_github_actions_version_env.ps1

      - name: Create the Cura dist
        run: |
          pyinstaller ./cura_inst/Go3D.spec

      # - name: Setup Sentry CLI
      #   uses: mathieu-bour/setup-sentry-cli@v1
      #   with:
      #     version: latest
      #     token: ${{ secrets.CURAENGINE_SENTRY_TOKEN }}
      #     organization: ultimaker-o7
      #     project: curaengine

      # - name: Upload and remove debug symbols
      #   run: |
      #     sentry-cli debug-files upload .\Go3D\CuraEngine.exe
      #     sentry-cli debug-files upload .\Go3D\CuraEngine.pdb
      #     sentry-cli debug-files upload .\Go3D\Arcus.dll
      #     sentry-cli debug-files upload .\Go3D\polyclipping.dll
      #   working-directory: dist

      - name: Get installer helper scripts
        run: |
          New-Item -ItemType Directory -Force -Path runner_scripts
          cd runner_scripts
          curl -O https://raw.githubusercontent.com/Ultimaker/cura-workflows/main/runner_scripts/cura_installer_filename.py
          curl -O https://raw.githubusercontent.com/Ultimaker/cura-workflows/main/runner_scripts/summarize_used_dependencies.py

      - name: Output the name file name and extension
        id: filename
        run: python runner_scripts/cura_installer_filename.py --os ${{ runner.os }} --arch ${{ inputs.architecture }} --enterprise ${{ inputs.enterprise }} --internal ${{ inputs.conan_internal }}

      - name: Summarize the used dependencies
        run: python runner_scripts/summarize_used_dependencies.py --installer_filename ${{ inputs.installer_name }}

      - name: Create PFX certificate from BASE64_PFX_CONTENT secret
        id: create-pfx
        env:
          PFX_CONTENT: ${{ secrets.WIN_CERT_INSTALLER_CER }}
        run: |
          $pfxPath = Join-Path -Path $env:RUNNER_TEMP -ChildPath "cert.pfx"; 
          $encodedBytes = [System.Convert]::FromBase64String($env:PFX_CONTENT); 
          Set-Content $pfxPath -Value $encodedBytes -AsByteStream;
          echo "PFX_PATH=$pfxPath" >> $env:GITHUB_OUTPUT;

      - name: Create the Windows msi installer (Powershell)
        run: |
          python ..\cura_inst\packaging\msi\create_windows_msi.py ..\cura_inst .\Go3D "${{inputs.installer_name}}.msi" "${{ inputs.app_name }}"
        working-directory: dist

      # - name: Sign the Windows msi installer (Powershell)
      #   env:
      #     PFX_PATH: ${{ steps.create-pfx.outputs.PFX_PATH }}
      #   run: |
      #     & "C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe" sign /f $Env:PFX_PATH /p "$Env:WIN_CERT_INSTALLER_CER_PASS" /fd SHA256 /t http://timestamp.digicert.com "${{ inputs.installer_name }}.msi"
      #   working-directory: dist

      - name: Create the Windows exe installer (Powershell)
        run: |
          python ..\cura_inst\packaging\NSIS\create_windows_installer.py ../cura_inst . "${{inputs.installer_name}}.exe"
        working-directory: dist

      # - name: Sign the Windows exe installer (Powershell)
      #   env:
      #     PFX_PATH: ${{ steps.create-pfx.outputs.PFX_PATH }}
      #   run: |
      #     & "C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe" sign /f $Env:PFX_PATH /p $Env:WIN_CERT_INSTALLER_CER_PASS /fd SHA256 /t http://timestamp.digicert.com "${{ inputs.installer_name }}.exe"
      #   working-directory: dist

      # - name: Remove internal packages before uploading
      #   run: |
      #     conan remove "*@internal/*" -f || true
      #     conan remove "cura_private_data*" -f || true

      # - name: Upload the Package(s)
      #   if: ${{ always() && ! inputs.conan_internal }}
      #   run: conan upload "*" -r cura --all -c

      - name: Upload the msi
        uses: actions/upload-artifact@v3
        with:
          name: ${{inputs.installer_name}}-msi
          path: |
            dist/${{inputs.installer_name }}.msi
          retention-days: 5

      - name: Upload the exe
        uses: actions/upload-artifact@v3
        with:
          name: ${{inputs.installer_name}}-exe
          path: |
            dist/${{inputs.installer_name }}.exe
          retention-days: 5

      # NOTE: The extension is .sh, since this isn't going to build-environment, so not on the Win build image.
      - name: Write the run info
        shell: python
        run: |
          import os
          with open("run_info.sh", "w") as f:
              f.writelines(f'echo "CURA_VERSION_FULL={os.environ["CURA_VERSION_FULL"]}" >> $GITHUB_ENV\n')

      # NOTE: The extension is .sh, since this isn't going to build-environment, so not on the Win build image.
      - name: Upload the run info
        uses: actions/upload-artifact@v3
        with:
          name: windows-run-info
          path: |
            run_info.sh
          retention-days: 5
